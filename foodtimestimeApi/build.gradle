/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Spark for responding to REST calls--the core of my API
    api 'com.sparkjava:spark-core:2.6.0'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:22.0'

    // JDBC driver for MySQL querying and storage
    implementation 'mysql:mysql-connector-java:5.1.44'

    // For parsing JSON
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // For Spark
    implementation 'org.slf4j:slf4j-api:1.7.+'
    implementation 'ch.qos.logback:logback-classic:1.+'
}

task createConfigFile(type:Copy) {
    // Create a File object representing the folder 'A/B'
    def CONFIG_DIR = new String('src/main/resources/configure/')
    def CLEAN_NAME = new String('.config_clean')
    def CONFIG_NAME = new String('config.json')
    def CONFIG_FILE = new File(CONFIG_DIR + CONFIG_NAME)

    // If it doesn't exist, copy the clean config to the same directory
    if (!CONFIG_FILE.exists()) {
        from(CONFIG_DIR + CLEAN_NAME)
        into(CONFIG_DIR)
        rename (CLEAN_NAME, CONFIG_NAME)
    }
}

build.dependsOn(createConfigFile)